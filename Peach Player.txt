#TouhouDanmakufu[Player]
#ScriptVersion[3]
#ID["PEACH_A"]
#Title["Princess Peach A"]
#Text["test"]
#Image["./Peach Render.png"]
#ReplayName["PeachA"]

let dir = GetCurrentScriptDirectory;
let playerID = GetPlayerObjectID;
let playerObj = ObjPrim_Create(OBJ_SPRITE_2D);
let hitboxObj = ObjPrim_Create(OBJ_SPRITE_2D);
let familiarObj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
let count = -1;
let countF = -1;
let isFocus = false;
let enemy;
let angle;

let shot = dir ~ "Peach Shot.txt";
let peachTexture = [dir ~ "peach back idle.png", dir ~ "peach sideways.png"];
let hitboxTexture = dir ~ "hitbox.png";
let familiarTexture = dir ~ "peach familiar.png";

@Initialize {
	LoadPlayerShotData(shot);
	
	SetPlayerSpeed(5, 2.5);
	
	ObjPlayer_AddIntersectionCircleA1(playerID, 0, 0, 2, 16);
	
	SetPlayerClip(0+6, 0+24, 384-6, 440-16);
	
	SetPlayerRebirthFrame(30);
	
	SetPlayerAutoItemCollectLine(120);
	
	TRenderPlayer;
	TRenderHitbox(GetPlayerX, GetPlayerY);
	TRenderFamiliar;
}

@Event {
	alternative(GetEventType)
	
	case(EV_REQUEST_SPELL) {
		if(GetPlayerSpell > 0) {
			SetScriptResult(true);
		}
		else {
			SetScriptResult(false);
		}
	}
	
	case(EV_PLAYER_SHOOTDOWN) {
		ObjRender_SetAlpha(playerObj, 0);
		ObjRender_SetAlpha(familiarObj[0], 0);
		ObjRender_SetAlpha(familiarObj[1], 0);
		ObjRender_SetAlpha(familiarObj[2], 0);
		ObjRender_SetAlpha(familiarObj[3], 0);
		SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
	}
	
	case(EV_PLAYER_REBIRTH) {
		SetForbidPlayerShot(false);
		SetForbidPlayerSpell(false);
		ObjRender_SetAlpha(playerObj, 255);
		ObjRender_SetAlpha(familiarObj[0], 255);
		ObjRender_SetAlpha(familiarObj[1], 255);
		ObjRender_SetAlpha(familiarObj[2], 255);
		ObjRender_SetAlpha(familiarObj[3], 255);
		SetPlayerInvincibilityFrame(120);
		SetPlayerSpell(3);
	}
}

@MainLoop {
	enemy = GetAllEnemyID();
	if (isKeyPressed(VK_SLOWMOVE)) {
		isFocus = true;
	}
	
	else if (GetVirtualKeyState(VK_SLOWMOVE) == KEY_PULL) {
		isFocus = false;
	}
	
	if  (IsPermitPlayerShot) {
		if (isKeyPressed(VK_SHOT)) {
			count++;
			countF++;
			if (count > 15) { count = 0; }
			if (countF > 5) { countF = 0; }
			if (length(enemy) > 0) { angle = atan2(ObjRender_GetY(enemy[0]) - GetPlayerY(), ObjRender_GetX(enemy[0]) - GetPlayerX()); }
			else { angle = 270; }
		}
		
		if (GetVirtualKeyState(VK_SHOT) == KEY_PULL) {
			count = -1;
			countF = -1;
		}
		
		if (count > 3) {
			CreatePlayerShotA1(GetPlayerX + 5, GetPlayerY - 20, 20, 270, 1.8, 1, 2);
			CreatePlayerShotA1(GetPlayerX - 5, GetPlayerY - 20, 20, 270, 1.8, 1, 2);
		}
		
		if (countF > 3) {
			CreatePlayerShotA1(ObjRender_GetX(familiarObj[0]), ObjRender_GetY(familiarObj[0]), 10, angle, 0.2, 1, 1);
			CreatePlayerShotA1(ObjRender_GetX(familiarObj[1]), ObjRender_GetY(familiarObj[1]), 10, angle, 0.2, 1, 1);
			CreatePlayerShotA1(ObjRender_GetX(familiarObj[2]), ObjRender_GetY(familiarObj[2]), 10, angle, 0.2, 1, 1);
			CreatePlayerShotA1(ObjRender_GetX(familiarObj[3]), ObjRender_GetY(familiarObj[3]), 10, angle, 0.2, 1, 1);
		}
	}
	
	yield;
}

@Finalize {
	
}

// ===== Functions =====

// i'm not writing that long boolean statement twice
// checks to see if a key is pressed or held
function isKeyPressed(key) {
	if(GetVirtualKeyState(key) == KEY_PUSH || GetVirtualKeyState(key) == KEY_HOLD) {
		return true;
	}
	return false;
}

function distFormula(x, y, x2, y2) {
	let val = power((x2 - x)^2 + (y2 - y)^2, 0.5);
	return val;
}

// ===== Tasks ======

task TRenderPlayer {
	let animFrame = 0;
	
	ObjPrim_SetTexture(playerObj, peachTexture[0]);
	Obj_SetRenderPriorityI(playerObj, 31);
	ObjRender_SetBlendType(playerObj, BLEND_ALPHA);
	ObjRender_SetAngleXYZ(playerObj, 0, 0 ,0);
	ObjRender_SetScaleXYZ(playerObj, 0.7, 0.7, 0);
	ObjRender_SetAlpha(playerObj, 255);
	ObjSprite2D_SetSourceRect(playerObj, 0, 0, 75, 110);
	ObjSprite2D_SetDestCenter(playerObj);
	ObjRender_SetPosition(playerObj, GetPlayerX, GetPlayerY, 0);
	
	while (!Obj_IsDeleted(playerObj)) {
		ObjRender_SetPosition(playerObj, GetPlayerX, GetPlayerY, 0);
		
		if (isKeyPressed(VK_LEFT)) {
			ObjPrim_SetTexture(playerObj, peachTexture[1]);
			ObjRender_SetAngleY(playerObj, 0);
			ObjRender_SetScaleXYZ(playerObj, 0.5, 0.5, 0);
			ObjSprite2D_SetSourceRect(playerObj, 0 + 64*floor(animFrame / 4), 0, 64 + 64*floor(animFrame / 4), 79);
			animFrame++;
			if (animFrame >= 32) {
				animFrame = 0;
			}
			yield;
		}
		
		else if (isKeyPressed(VK_RIGHT)) {
			ObjPrim_SetTexture(playerObj, peachTexture[1]);
			ObjRender_SetAngleY(playerObj, 180);
			ObjRender_SetScaleXYZ(playerObj, 0.5, 0.5, 0);
			ObjSprite2D_SetSourceRect(playerObj, 0 + 64*floor(animFrame / 4), 0, 64 + 64*floor(animFrame / 4), 79);
			animFrame++;
			if (animFrame >= 32) {
				animFrame = 0;
			}
			yield;
		}
		
		else { 
			ObjPrim_SetTexture(playerObj, peachTexture[0]);
			ObjRender_SetScaleXYZ(playerObj, 0.7, 0.7, 0);
			ObjSprite2D_SetSourceRect(playerObj, 0 + 75*floor(animFrame / 4), 0, 75 + 75*floor(animFrame / 4), 110);
			animFrame++;
			if (animFrame >= 20) {
				animFrame = 0;
			}
			yield;
		}
		
		yield;
	}
}

task TRenderHitbox(x, y) {
	let alpha = 0;
	let spin = 0;
	
	ObjPrim_SetTexture(hitboxObj, hitboxTexture);
	ObjRender_SetBlendType(hitboxObj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(hitboxObj, 50);
	ObjRender_SetAlpha(hitboxObj, 0); // hides the hitbox spright from view
	ObjRender_SetScaleXYZ(hitboxObj, 1, 1, 0);
	ObjSprite2D_SetSourceRect(hitboxObj, 0, 0, 60, 60);
	ObjSprite2D_SetDestCenter(hitboxObj);
	
	// Sets up the hitbox sprite to spin and show up
	while (!Obj_IsDeleted(hitboxObj)) {
		ObjRender_SetPosition(hitboxObj, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetAngleZ(hitboxObj, spin);
		ObjRender_SetAlpha(hitboxObj, alpha);
		
		if (isFocus) {
			alpha = 255;
		}
		else {
			alpha = 0;
		}
		
		spin += 2;
		
		yield;
	}
}

task TRenderFamiliar {
	let spin = 0;
	let x = 35;
	let x2 = 15;
	let y = 9;
	let y2 = 35;
	
	ascent(i in 0 .. 4) {
		ObjPrim_SetTexture(familiarObj[i], familiarTexture);
		ObjRender_SetBlendType(familiarObj[i], BLEND_ALPHA);
		Obj_SetRenderPriorityI(familiarObj[i], 50);
		ObjRender_SetAlpha(familiarObj[i], 255);
		ObjRender_SetScaleXYZ(familiarObj[i], 1, 1, 0);
		ObjSprite2D_SetSourceRect(familiarObj[i], 0, 0, 14, 16);
		ObjSprite2D_SetDestCenter(familiarObj[i]);
	}
	
	while(!Obj_IsDeleted(playerObj)) {
		ObjRender_SetPosition(familiarObj[0], GetPlayerX - x, GetPlayerY + y, 0);
		ObjRender_SetPosition(familiarObj[1], GetPlayerX + x, GetPlayerY + y, 0);
		ObjRender_SetPosition(familiarObj[2], GetPlayerX - x2, GetPlayerY + y2, 0);
		ObjRender_SetPosition(familiarObj[3], GetPlayerX + x2, GetPlayerY + y2, 0);
		
		if (isFocus) {
			if (x > 15) { x -= 6; }
			if (y > -23) { y -= 12; }
			if (x2 > 7) { x2 -= 6; }
			if (y2 > -33) { y2 -= 12; }
		}
		
		else {
			if (x < 35) { x += 6; }
			if (y < 9) { y += 18; }
			if (x2 < 15) { x2 += 6; }
			if (y2 < 35) { y2 += 18; }
		}		
		
		ObjRender_SetAngleZ(familiarObj[0], spin);
		ObjRender_SetAngleZ(familiarObj[1], spin);
		ObjRender_SetAngleZ(familiarObj[2], spin);
		ObjRender_SetAngleZ(familiarObj[3], spin);
		
		spin += 7;
		
		yield;
	}
	
}